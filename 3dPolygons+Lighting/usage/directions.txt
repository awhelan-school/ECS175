**********************************************************************
*			Light Model and Shading 	             *		  
**********************************************************************
*								     *
* ->(T)ranslate Polygon - Use Arrow Keys			     *
* ->(R)otate Object - Toggle "r" and rotate with +/-		     *
* ->(S)cale Object  - Toggle "s" and scale with +/-		     *
* ->(V)iewport Pan  - Toggle "v" and pan camera with +/- & arrow key *	
* ->(H)alfTone      - Toggle "h" to display HalfTone                 *
* ->(L)ight         - Toggle "l" to display Light Sliders            *
* ->(X)Source       - Toggle "x" to move light source                *
* ->(M)aterials     - Toggle "m" to adjust material properties	     *
* ->(0-9)Select Object - Select Object to Manipulate		     *	                    
*			  					     *
**********************************************************************

# Detailed Descriptions

Project 3 Instuctions
__________________________________________________________________________________________________________


1) HalfTone: Pressing this key will render the scene in a halftone. I just used a random shuffle to get numbers between 0-10 based on intensity and either set the pixel on/off (i.e 0 or 1). I set pixel size to 3 instead of 1 and just call gl_vertex 9 times like you suggested.
       
2) Light: All the sliders are "Virtual Sliders" (pattent pending). They are just rendered in console and you can use the up and down keys to cycle through them and left/right keys to increase and descrease their respective values. 
         
3) Source: The light source is rendered in 3D space and marked as a yellow dot in Viewport 1. Hitting X will let you change the desired x,y,z coordinates. The scene is also rendered dynamically so changing the light position will adjust the shading.
       
4) Materials: Same concept as Light, changing values with arrow keys and cycling through them with up/down arrow keys.      

5) Painters Algorithm: This is implemented with STL sort and a simple comparator function that puts the triangles in ascending order based on their depth. I adjusted my implementation to allow for translations to affect the rendering of triangles. In other words, you can try moving the objects in front of each other using viewport 1 and you will notice that they are rendered in the correct order. Only translations not scale. 

# Additional Notes

* Project 2 Instructions below for reference

* Half-Toning also displays the normal vectors. 

* Sliders are virtual so they display a percentage of values from 0-10 -> min,max. I wasn't sure about the range of some values such as Phong exponent and just left it as a Natural number. 

* All of the rasterization is handled by your sample rasterizer (THANK YOU) :)

* Input files reside in the input folder

* Source and Include files are in the respective folders

* The bunny object must be copied and pasted or renamed to test_objs.txt. Comments are okay they are filtered and I only use the raw values. 

* Tested on both MacOS and Linux(Ubuntu) just change a single line in the Makefile

Project 2 Instructions
__________________________________________________________________________________________________________

1) Selection - Use the number keys to select an object you wish to perform a transformation on. Valid Keys are numerical keys 0-9. Once an object is selected you can chain multiple transformations on that particular object.

2) View-port Pan (extra) - This was implemented with gluLookAt() and sets up the camera initially looking at the center of the unit cube (0.5 0.5 0.5) From the -1.0 Z Axis to achieve a sort of perspective projection. The panning functionality allows you to zoom in/out with the +/- keys and pan the scene in up/down and left/right directions using arrow keys. I mainly used it to get perspective on objects in 3D space and to be able to move my objects inside the unit cube since.

3) Scale - The scaling is performed with respect to the centroid using the average sum of point coordinates. This feature is unchanged from the previous assignment. Simply use the +/- keys to make and object bigger or smaller.

4) Translate - Again this feature is unchanged other than I added arrow keys to perform the translations in 3D space. Left/Right affect the x-axis and Up/Down affect the y-axis the +/- moves the object in the corresponding z-axis.  

5) Switching Modes - Toggling the proper key will put you in that desired transformation mode. Transformations will not be performed unless a Mode is specified. 
 



